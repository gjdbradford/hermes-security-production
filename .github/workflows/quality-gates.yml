name: Quality Gates & Deployment

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

# GitHub Pages permissions
permissions:
  contents: read
  pages: write
  id-token: write

# Environment variables
env:
  NODE_VERSION: '18'
  CACHE_VERSION: v1

# Quality Gates Configuration
jobs:
  # ========================================
  # QUALITY GATE 1: Code Quality & Linting
  # ========================================
  code-quality:
    name: 🔍 Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🔍 ESLint Check
        run: npm run lint
        continue-on-error: true

      - name: 🎨 Prettier Check
        run: npx prettier --check "src/**/*.{ts,tsx,js,jsx,json,css,md}"
        continue-on-error: true

      - name: 📝 TypeScript Type Check
        run: npx tsc --noEmit
        continue-on-error: false

      - name: 🎯 CTA Master Rules Validation
        run: npm run validate:cta
        continue-on-error: false

      - name: 🔒 Security Audit
        run: npm audit --audit-level=moderate
        continue-on-error: false

  # ========================================
  # QUALITY GATE 2: Build Validation
  # ========================================
  build-validation:
    name: 🏗️ Build Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: code-quality

    strategy:
      matrix:
        environment: [staging, production]

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🏗️ Build for ${{ matrix.environment }}
        run: |
          if [ "${{ matrix.environment }}" = "staging" ]; then
            npm run build:staging
          else
            npm run build:production
          fi
        continue-on-error: false

      - name: 📊 Build Size Check
        run: |
          echo "📊 Build size analysis:"
          du -sh dist/
          echo "📁 Directory structure:"
          find dist/ -type f -name "*.js" -o -name "*.css" | head -10

      - name: 🔍 Asset Validation
        run: |
          # Check critical files exist
          for file in index.html favicon.ico robots.txt sitemap.xml; do
            if [ -f "dist/$file" ]; then
              echo "✅ $file found"
            else
              echo "❌ $file missing"
              exit 1
            fi
          done

          # Check assets directory
          if [ -d "dist/assets" ]; then
            echo "✅ Assets directory found"
            ls -la dist/assets/ | head -5
          else
            echo "❌ Assets directory missing"
            exit 1
          fi
        continue-on-error: false

  # ========================================
  # QUALITY GATE 3: Testing & Validation
  # ========================================
  testing-validation:
    name: 🧪 Testing & Validation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: code-quality

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🧪 Run Routing Tests
        run: npm run test:routing
        continue-on-error: false

      - name: 🌐 Environment Tests
        run: npm run test:all-envs
        continue-on-error: false

      - name: 🔧 CDN Integration Tests
        run: npm run test:cdn
        continue-on-error: false

      - name: 🛡️ Security Tests
        run: npm run test:captcha
        continue-on-error: false

  # ========================================
  # QUALITY GATE 4: Security & Secrets
  # ========================================
  security-check:
    name: 🛡️ Security & Secrets Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: code-quality

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Detect Secrets
        uses: Yelp/detect-secrets-action@master
        with:
          baseline: .secrets.baseline
          fail-on-any: true

      - name: 🔒 Dependency Security Scan
        run: |
          npm audit --audit-level=high
        continue-on-error: false

      - name: 📋 Security Report
        run: |
          echo "🛡️ Security check completed"
          echo "✅ No secrets detected"
          echo "✅ No high-severity vulnerabilities found"

  # ========================================
  # QUALITY GATE 5: Performance Check
  # ========================================
  performance-check:
    name: ⚡ Performance Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build-validation, testing-validation]

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🏗️ Build for Performance Check
        run: npm run build:production

      - name: 📊 Bundle Size Analysis
        run: |
          echo "📊 Bundle size analysis:"
          find dist/assets -name "*.js" -exec wc -c {} + | sort -n
          echo ""
          echo "📈 Largest files:"
          find dist/assets -name "*.js" -exec ls -lh {} + | sort -k5 -hr | head -5

      - name: ⚡ Performance Budget Check
        run: |
          # Check if main bundle is under 500KB
          MAIN_BUNDLE_SIZE=$(find dist/assets -name "index-*.js" -exec wc -c {} + | awk '{sum+=$1} END {print sum}')
          if [ "$MAIN_BUNDLE_SIZE" -gt 512000 ]; then
            echo "❌ Main bundle too large: ${MAIN_BUNDLE_SIZE} bytes (max: 512KB)"
            exit 1
          else
            echo "✅ Main bundle size OK: ${MAIN_BUNDLE_SIZE} bytes"
          fi

  # ========================================
  # DEPLOYMENT: Staging (GitHub Pages)
  # ========================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [code-quality, build-validation, testing-validation, security-check, performance-check]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment:
      name: staging
      url: https://gjdbradford.github.io/hermes-security-production/

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🏗️ Build for Staging
        run: npm run build:staging

      - name: 🚫 Disable Jekyll
        run: |
          echo "# Static site - no Jekyll processing" > dist/.nojekyll
          echo "✅ Jekyll disabled for GitHub Pages"

      - name: 📋 Staging Deployment Summary
        run: |
          echo "🚀 Staging Deployment Summary:"
          echo "📍 URL: https://gjdbradford.github.io/hermes-security-production/"
          echo "📊 Build size: $(du -sh dist/ | cut -f1)"
          echo "📁 Files: $(find dist/ -type f | wc -l)"
          echo "✅ Ready for deployment"

      - name: 📦 Upload Staging Build Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist/

      - name: 🚀 Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
        with:
          artifact_name: staging-build

  # ========================================
  # DEPLOYMENT: Production (Vercel)
  # ========================================
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment:
      name: production
      url: https://hermes-security-production.vercel.app/

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🏗️ Build for Production
        run: npm run build:production

      - name: 📋 Production Deployment Summary
        run: |
          echo "🌟 Production Deployment Summary:"
          echo "📍 URL: https://hermes-security-production.vercel.app/"
          echo "📊 Build size: $(du -sh dist/ | cut -f1)"
          echo "📁 Files: $(find dist/ -type f | wc -l)"
          echo "✅ Ready for production deployment"

      - name: 🚀 Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          scope: ${{ secrets.VERCEL_ORG_ID }}

  # ========================================
  # POST-DEPLOYMENT VALIDATION
  # ========================================
  post-deployment-validation:
    name: ✅ Post-Deployment Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [deploy-staging, deploy-production]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🌐 Validate Staging Deployment
        run: |
          echo "🔍 Validating staging deployment..."
          npm run test:all-envs
          echo "✅ Staging validation complete"

      - name: 📊 Deployment Report
        run: |
          echo "🎉 Deployment Complete!"
          echo ""
          echo "📋 Deployment Summary:"
          echo "🟢 Staging: https://gjdbradford.github.io/hermes-security-production/"
          echo "🌟 Production: https://hermes-security-production.vercel.app/"
          echo ""
          echo "✅ All quality gates passed"
          echo "✅ All tests passed"
          echo "✅ Security checks passed"
          echo "✅ Performance checks passed"
          echo "✅ Deployments successful"
