name: Deploy to GitHub Pages

# DISABLED: This workflow is disabled because deployment is now handled by quality-gates.yml
# which ensures all quality gates pass before deployment
# on:
#   push:
#     branches: [main]
#   pull_request:
#     branches: [main]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: 'pages'
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for Staging
        run: npm run build:staging

      - name: Disable Jekyll and prepare static assets
        run: |
          # Create .nojekyll file to completely disable Jekyll processing
          echo "# This file tells GitHub Pages not to process the site with Jekyll" > dist/.nojekyll
          echo "# Static site - no Jekyll processing required" >> dist/.nojekyll

          # Also create .nojekyll in root for extra safety
          echo "# This file tells GitHub Pages not to process the site with Jekyll" > .nojekyll
          echo "# Static site - no Jekyll processing required" >> .nojekyll

          # Copy .nojekyll to dist if it exists in root
          if [ -f .nojekyll ]; then
            cp .nojekyll dist/
            echo "‚úÖ .nojekyll file copied to dist/"
          fi

          # Create docs folder structure to bypass Jekyll completely
          echo "üìÅ Creating docs folder structure to bypass Jekyll..."
          mkdir -p docs

          # Copy the React app to docs folder as backup
          cp -r dist/* docs/
          echo "‚úÖ React app copied to docs folder"

          # Ensure .nojekyll exists in docs folder
          echo "# This file tells GitHub Pages not to process the docs folder with Jekyll" > docs/.nojekyll
          echo "# This is a React application - no Jekyll processing required" >> docs/.nojekyll

          # Create a proper index.html in docs that redirects to the main app
          cat > docs/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Hermes Security - Redirecting...</title>
              <meta name="robots" content="noindex, nofollow">
              <script>window.location.replace('/');</script>
              <noscript><meta http-equiv="refresh" content="0; url=/"></noscript>
          </head>
          <body>
              <div style="font-family: system-ui; text-align: center; padding: 2rem;">
                  <h1>üõ°Ô∏è Hermes Security</h1>
                  <p>Redirecting to main application...</p>
                  <p><a href="/">Click here if not redirected automatically</a></p>
              </div>
          </body>
          </html>
          EOF

          # Verify .nojekyll is present in both locations
          if [ -f dist/.nojekyll ]; then
            echo "‚úÖ .nojekyll file confirmed in dist/"
          else
            echo "‚ùå .nojekyll file not found in dist/"
            exit 1
          fi

          if [ -f docs/.nojekyll ]; then
            echo "‚úÖ .nojekyll file confirmed in docs/"
          else
            echo "‚ùå .nojekyll file not found in docs/"
            exit 1
          fi

          # Verify all static assets are present
          echo "üìÅ Checking dist folder contents:"
          ls -la dist/

          # Check for critical files
          echo "üîç Checking for critical static assets:"
          for file in index.html favicon.ico favicon.svg robots.txt sitemap.xml site.webmanifest; do
            if [ -f "dist/$file" ]; then
              echo "‚úÖ $file found"
            else
              echo "‚ö†Ô∏è  $file not found"
            fi
          done

          # Check for assets directory
          if [ -d "dist/assets" ]; then
            echo "‚úÖ assets directory found"
            ls -la dist/assets/ | head -10
          else
            echo "‚ùå assets directory not found"
            exit 1
          fi

          # Ensure proper permissions for all files
          echo "üîê Setting proper permissions..."
          find dist/ -type f -exec chmod 644 {} \;
          find dist/ -type d -exec chmod 755 {} \;
          echo "‚úÖ Permissions set"

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
